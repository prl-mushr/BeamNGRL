Cost_config:
  goal_w: 1.0 ## weight on the terminal goal cost
  speed_w: 0.0 ## weight with which target speed will be tracked
  roll_w: 100.0 ## weight on roll index but also controls for lateral acceleration limits.. something to think about is how longitudenal accel affects accel limits..
  lethal_w: 0.0 # weight on lethal stuff. Note that this is applied to a piecewise function which is :  1/cos(surface angle) for SA < thresh and 1000 for SA > thresh
  stop_w: 0.0 ## weight on actually lethal things like people, trees, rocks and so on. Set to 1000.0 and query the min(Sampling.total_cost) > 1000.0 to know if all trajs are bad
  speed_target: 10.0 ## target speed in m/s
  critical_SA: 1.15 # 0.5 is the critical slope angle 1/cos(angle) is used for state cost evaluation
  critical_RI: 1.0 ## limiting ratio of lateral to vertical acceleration
  car_bb_width: 2.0
  car_bb_length: 3.0
  critical_vert_acc: 3.0
  critical_vert_spd: 0.15
Dynamics_config:
  wheelbase: 2.6
  throttle_to_wheelspeed: 20.0
  steering_max: 0.6
  dt: 0.04
  D: 0.8
  B: 6.8
  C: 1.5
  lf: 1.3
  lr: 1.3
  Iz: 1.0
  LPF_tau: 1.0
  res_coeff: 0.0
  drag_coeff: 0.0
  car_length: 3.0
  car_width: 1.5
  cg_height: 0.5
  type: "slip3d" ## this will be overwritten during evaluation
  network:
    state_input_feat: ['vx', 'vy', 'vz']
    state_output_feat: ['vx', 'vy', 'vz']
    control_feat: ['steer', 'throttle']
    use_normalizer: False

    class: ContextMLP
    net_kwargs:
      hidden_depth: 2
      hidden_dim: 32
      batch_norm: True
  model_weights: "best_40.pth"

  network_baseline:
    state_input_feat: ['vx', 'vy', 'vz']
    state_output_feat: ['vx', 'vy', 'vz']
    control_feat: ['steer', 'throttle']
    use_normalizer: False

    class: SequentialContextMLP
    net_kwargs:
      hidden_depth: 2
      hidden_dim: 32
      batch_norm: True
  model_weights_baseline: "best_100.pth"

  network_KARMA:
    state_input_feat: ['vx', 'vy', 'vz']
    state_output_feat: ['vx', 'vy', 'vz']
    control_feat: ['steer', 'throttle']
    use_normalizer: False

    class: ParallelContextMLP
    net_kwargs:
      hidden_depth: 2
      hidden_dim: 32
      batch_norm: True
  model_weights_KARMA: "best_40.pth"

Sampling_config:
  control_dim: 2
  noise_0: 1.0
  noise_1: 1.0
  scaled_dt: 0.2 ## this is dt * bandwidth of the physical actuators (in what units?)
  temperature: 0.1 ## the terrain CNN requires a temperature of 0.05 so may have to change this when we run Terrain CNN?
  max_thr: 0.8
  min_thr: -0.2

MPPI_config:
  ROLLOUTS: 1024
  TIMESTEPS: 32
  BINS: 1
  u_per_command: 1

Map_config:
  map_name: "small_island"
  map_size: 64
  map_res: 0.25
  map_res_hitl: 0.25
  elevation_range: 4.0
  layers:
    color: 3
    elevation: 1
    semantics: 3
    costmap: 1
  topic_name: "/grid_map_occlusion_inpainting/all_grid_map"

# models: ['slip3d_150', 'slip3d', 'slip3d_LPF', 'slip3d_LPF_drag', 'TerrainCNN']
# models: ['slip3d_150', 'slip3d_LPF_drag', 'TerrainCNN'] ## TerrainCNN suboptimal, our method, our method without sys-ID.
# scenarios: ['hill-0', 'hill-2' ,'ditch-1', 'race-0', 'race-1']
# time_limit: [20.0,    40.0,     20.0,      60.0,     50.0]  # (simulated) time limit for each scenario.
# lookahead:  [20.0,    20.0,     20.0,      20.0,     15.0]  # lookahead on scenario by scenario basis
models: ['slip3d', 'KARMA', 'TerrainCNN']
scenarios: ['hill-2', 'ditch-1', 'race-1']
time_limit: [20.0,     20.0,      50.0]  # (simulated) time limit for each scenario.
lookahead:  [20.0,     20.0,      10.0]  # lookahead on scenario by scenario basis
## I Keep the following for tuning using a single case and making sure my baselines are good:
# scenarios: ['race-1']
# time_limit: [80.0] ## (simulated) time limit for each scenario.
# lookahead:  [20.0]  # lookahead on scenario by scenario basis
num_iters: 5
start_pos: [-67, 336, 34.5]
start_quat: [0, 0, 0.3826834, 0.9238795]
start_pose_noise: 1.0
output_dir: "train"
map_name: "small_island"

save_data: False
run_lockstep: True

vehicle:
  make: "sunburst"
  model: "offroad"

dataset:
  name: 'small_island_manual'
  augment: False
  state_input_key: 'future_states'
  control_input_key: 'future_ctrls'
  ctx_input_keys: ['bev_elev', 'bev_normal']